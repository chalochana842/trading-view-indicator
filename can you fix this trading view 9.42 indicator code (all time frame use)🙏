//@version=5
indicator("9:45 AM Line - Last 20 Days (UTC-4)", overlay=true)

// Input parameters
line_color = input.color(color.red, "Line Color")
line_width = input.int(2, "Line Width")
days_to_show = input.int(20, "Number of Days")
nine_forty_two_color = input.color(color.blue, "9:42 AM Line Color") // Color for 9:42 AM line

// Function to calculate timestamp for a specific time
get_target_timestamp(year, month, dayofmonth, hour, minute) =>
    timestamp("UTC-4", year, month, dayofmonth, hour, minute)

// Get the current time and date adjusted to the UTC-4 timezone
current_time = timestamp("UTC-4", year, month, dayofmonth, hour, minute)
current_day = dayofmonth
current_month = month
current_year = year

// Define the target times (9:42 AM and 9:45 AM) in the UTC-4 time zone
target_hour_942 = 9
target_minute_942 = 42
target_hour_945 = 9
target_minute_945 = 45

// Variables to store the 9:45 AM line levels and bar indexes for the last 20 days
var float[] levels = array.new_float()
var int[] times = array.new_int()

// Store the 9:42 AM price and draw a line
var float nine_forty_two_price = na
var int nine_forty_two_index = na
if (hour(current_time) == target_hour_942 and minute(current_time) == target_minute_942)
    nine_forty_two_price := open
    nine_forty_two_index := bar_index

// Array to store 9:42 AM line references
var line[] nine_forty_two_lines = array.new_line()

// Draw a new line from the 9:42 AM price for the past number of days
if (not na(nine_forty_two_price))
    // Clear old lines
    if array.size(nine_forty_two_lines) > 0
        for i = 0 to array.size(nine_forty_two_lines) - 1
            line.delete(array.get(nine_forty_two_lines, i))
        array.clear(nine_forty_two_lines)

    // Calculate the start time (number of days ago)
    start_time = get_target_timestamp(current_year, current_month, current_day, target_hour_942, target_minute_942) - (days_to_show * 24 * 60 * 60 * 1000)
    start_bar = ta.valuewhen(time >= start_time, bar_index, 0)
    
    // Ensure lines do not extend beyond 500 bars into the future
    end_bar = math.min(bar_index + 500, bar_index + 500)
    line_id = line.new(x1=start_bar, y1=nine_forty_two_price, x2=end_bar, y2=nine_forty_two_price, color=nine_forty_two_color, width=line_width, extend=extend.none)
    array.push(nine_forty_two_lines, line_id)

// Check if the current time matches 9:45 AM
if (hour(current_time) == target_hour_945 and minute(current_time) == target_minute_945)
    // Store the high of the 9:45 AM candle and the current bar index
    array.unshift(levels, open)
    array.unshift(times, bar_index)
    // Remove the oldest level if the array exceeds the number of days
    if (array.size(levels) > 0)
        array.pop(levels)
        array.pop(times)

// Draw or update the 9:45 AM lines
if (array.size(levels) > 0)
    for i = 0 to array.size(levels) - 1
        // Ensure lines do not extend beyond 500 bars into the future
        line_end = math.min(bar_index + 500, bar_index + 500)
        line.new(x1=array.get(times, i), y1=array.get(levels, i), x2=line_end, y2=array.get(levels, i), color=line_color, width=line_width, extend=extend.none)

// Check if the current bar is at 9:42 AM and draw the line
is_942_am = (hour(current_time) == target_hour_942 and minute(current_time) == target_minute_942)
if (is_942_am)
    line.new(bar_index, open, bar_index + 1, open, color=color.blue, width=1, extend=extend.right)


